===== Config file =====
[virtual_sdcard]
path = /home/klipper/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	{% set E = printer["gcode_macro START_PRINT"].retract|float %}
	TURN_OFF_HEATERS
	M107
	G91
	G1 E-{E} F1500
	G90
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	PARK

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% set E = printer["gcode_macro START_PRINT"].retract|float %}
	SAVE_GCODE_STATE NAME=PAUSE_STATE
	BASE_PAUSE
	G91
	G1 E-{E} F1500
	G90
	PARK

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	{% set E = printer["gcode_macro START_PRINT"].retract|float %}
	G91
	G1 E{E} F1500
	G90
	RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=1
	BASE_RESUME

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _CLIENT_LINEAR_MOVE]
description = Linear move with save and restore of the gcode state
gcode = 
	{% set x_move = "X" ~ params.X if params.X is defined else "" %}
	{% set y_move = "Y" ~ params.Y if params.Y is defined else "" %}
	{% set z_move = "Z" ~ params.Z if params.Z is defined else "" %}
	{% set e_move = "E" ~ params.E if params.E is defined else "" %}
	{% set rate = "F" ~ params.F if params.F is defined else "" %}
	{% set ABSOLUTE = params.ABSOLUTE | default(0) | int != 0 %}
	{% set ABSOLUTE_E = params.ABSOLUTE_E | default(0) | int != 0 %}
	SAVE_GCODE_STATE NAME=_client_movement
	{% if x_move or y_move or z_move %}
	G9{ 0 if ABSOLUTE else 1 }
	{% endif %}
	{% if e_move %}
	M8{ 2 if ABSOLUTE_E else 3 }
	{% endif %}
	G1 { x_move } { y_move } { z_move } { e_move } { rate }
	RESTORE_GCODE_STATE NAME=_client_movement

[gcode_macro Backup_on_GitHub]
gcode = 
	{% set message = params.MESSAGE|default() %}
	{% if message %}
	RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
	{% else %}
	RUN_SHELL_COMMAND CMD=update_git_script
	{% endif %}

[gcode_macro list_sensors]
gcode = 
	{ action_respond_info(printer.heaters.available_heaters | join(', ')) }
	{ action_respond_info(printer.heaters.available_sensors | join(', ')) }

[gcode_macro Power_OFF]
gcode = SET_PIN PIN=Power VALUE=0

[gcode_macro _POWER_OFF_PRINTER]
gcode = SET_PIN PIN=Power VALUE=0

[gcode_macro ACTIVATE_POWER_OFF]
gcode = 
	UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60

[gcode_macro DEACTIVATE_POWER_OFF]
gcode = 
	UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=0

[delayed_gcode POWER_OFF_PRINTER_CHECK_ACT]
gcode = 
	{% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
	UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
	{% else %}
	UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60
	{% endif %}

[delayed_gcode POWER_OFF_PRINTER_CHECK]
gcode = 
	{% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
	{% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 50.0 %}
	{% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
	UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
	_POWER_OFF_PRINTER
	{% else %}
	UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
	{% endif %}
	{% else %}
	{% if printer.idle_timeout.state == "Printing" %}
	UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
	{% else %}
	{% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
	UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
	{% else %}
	UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
	{% endif %}
	{% endif %}
	{% endif %}
	{% endif %}

[gcode_macro M141]
gcode = SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={params.S|default(0)}

[gcode_macro M80]
gcode = SET_PIN PIN=Power  VALUE=1

[gcode_macro M81]
gcode = 
	
	SET_PIN PIN=Power VALUE=0

[gcode_macro M486]
gcode = 
	
	
	
	
	
	
	
	
	
	
	
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro M190]
rename_existing = M190.1
gcode = 
	{% if printer["gcode_macro status_heating"] != null %}
	status_heating
	{% endif %}
	M190.1 { rawparams }
	{% if printer["gcode_macro status_ready"] != null %}
	status_ready
	{% endif %}

[gcode_macro _CHOME]
gcode = 
	{% if printer["gcode_macro status_homing"] != null %}
	status_homing
	{% endif %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	G28
	{% endif %}
	{% if printer["gcode_macro status_ready"] != null %}
	status_ready
	{% endif %}

[gcode_macro M109]
rename_existing = M109.1
gcode = 
	{% if printer["gcode_macro status_heating"] != null %}
	status_heating
	{% endif %}
	M109.1 { rawparams }
	{% if printer["gcode_macro status_ready"] != null %}
	status_ready
	{% endif %}

[gcode_macro _MOVE_AWAY]
gcode = 
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	
	G90
	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000

[gcode_macro PARK_CENTER_REAR]
gcode = 
	{% if printer["gcode_macro status_busy"] != null %}
	status_busy
	{% endif %}
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600
	{% if printer["gcode_macro status_ready"] != null %}
	status_ready
	{% endif %}

[gcode_macro START_PRINT]
variable_retract = 15
gcode = 
	{% set chamber_temp = params.CHAMBER_TEMP|default(0)|float %}
	{% set extruder_temp = params.EXTRUDER_TEMP|default(210)|float %}
	{% set bed_temp = params.BED_TEMP|default(60)|float %}
	{% set E = printer["gcode_macro START_PRINT"].retract|float %}
	CLEAR_PAUSE
	G28
	Smart_Park
	M220 S100
	M221 S100
	SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={chamber_temp}
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp * 0.75}
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}
	G90
	M82
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}
	
	G1 E-15 F3600
	
	G28
	BED_MESH_CALIBRATE
	PRIME_LINE

[gcode_macro pid_soplo]
gcode = 
	PID_CALIBRATE HEATER=extruder TARGET=250

[gcode_macro pid_bed]
gcode = 
	PID_CALIBRATE HEATER=heater_bed TARGET=105

[gcode_macro BED]
gcode = 
	PROBE_CALIBRATE

[gcode_macro END_PRINT]
gcode = 
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.z < (max_z - 2) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	
	M400
	G92 E0
	G1 E-15 F3600
	G91
	G0 Z{z_safe} F3600
	G0 X{x_safe} Y{y_safe} F20000
	
	
	M104 S0
	M104 S0
	M140 S0
	M106 S0
	G90
	G0 X{max_x / 2} Y{max_y} F3600
	
	SONG_CRAB_RAVE
	
	
	
	M117 Finished!
	UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30

[gcode_macro M300]
gcode = 
	
	{% set S = params.S|default(1000)|int %}
	
	{% set P = params.P|default(100)|int %}
	
	
	{% set V = params.V|default(99)|int %}
	SET_PIN PIN=beeper VALUE={0.1 * (V / 100) if S > 0 else 1} CYCLE_TIME={ 1.0 / S if S > 0 else 1 }
	G4 P{P}
	SET_PIN PIN=beeper VALUE=0 CYCLE_TIME={ 0.001 }
description = 
	"Plays a beep sound.
	@param {int} [S=1000] - Frequency in Hz
	@param {int} [P=100] - Duration in ms
	@param {int} [V=99] - Volume in percent"

[gcode_macro PRIME_LINE]
gcode = 
	{% set feedrate = params.F|default(10)|float * 60 %}
	{% set length = 100.0 %}
	{% set width = printer.configfile.settings.extruder.nozzle_diameter|float %}
	{% set height = ( (width / 0.04)|int - (width / 0.04 / 4)|int )|float * 0.04 %}
	
	{% set extrude = length * width * height * 1.5 %}
	SAVE_GCODE_STATE NAME=PRIME_LINE_STATE
	SET_IDLE_TIMEOUT TIMEOUT=7200
	{% if 'Y' in params %}
	{% set x_start = 1.0 %}
	{% set y_start = (printer.toolhead.axis_maximum.y|float - 100) / 2 %}
	G0 X{x_start} Y{y_start} F5000
	G0 Z{height} F1500
	G91
	
	G1 E8 F300
	
	
	G1 Y100 E{extrude} F{feedrate}
	G0 X{width} F5000
	G1 Y-100 E{extrude} F{feedrate}
	{% else %}
	{% set x_start = (printer.toolhead.axis_maximum.x|float - 100) / 2 %}
	{% set y_start = 1.0 %}
	G0 X{x_start} Y{y_start} F5000
	G0 Z{height} F1500
	G91
	
	G1 E8 F300
	
	
	G1 X100 E{extrude} F{feedrate}
	G0 Y{width} F5000
	G1 X-100 E{extrude} F{feedrate}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PRIME_LINE_STATE

[gcode_macro VINT]
gcode = 
	SCREWS_TILT_CALCULATE

[gcode_macro LOW_TEMP_CHECK]
gcode = 
	{% set extruder_temp = params.T|default(240)|float %}
	{% if printer.extruder.target > extruder_temp %}
	{% set extruder_temp = printer.extruder.target %}
	{% endif %}
	{% if printer.extruder.temperature < extruder_temp %}
	M118 Heating to {extruder_temp}
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}
	{% endif %}

[gcode_macro M76]
gcode = 
	PAUSE

[gcode_macro M601]
gcode = 
	PAUSE

[gcode_macro G27]
gcode = 
	PARK

[gcode_macro M125]
gcode = 
	PARK

[gcode_macro M600]
gcode = 
	PAUSE

[gcode_macro M701]
gcode = 
	FILAMENT_LOAD

[gcode_macro M702]
gcode = 
	FILAMENT_UNLOAD

[gcode_macro M500]
gcode = 
	SAVE_CONFIG

[gcode_macro PARK]
gcode = 
	{% set x_park = params.X|default(0)|float %}
	{% set y_park = params.Y|default(0)|float %}
	{% set z_park = params.Z|default(10)|float + printer.toolhead.position.z|float %}
	{% set x_max = printer.toolhead.axis_maximum.x|float %}
	{% set y_max = printer.toolhead.axis_maximum.y|float %}
	{% set z_max = printer.toolhead.axis_maximum.z|float %}
	{% if x_park > x_max %}
	{% set x_park = x_max %}
	{% endif %}
	{% if y_park > y_max %}
	{% set y_park = y_max %}
	{% endif %}
	{% if z_park > z_max %}
	{% set z_park = z_max %}
	{% endif %}
	SAVE_GCODE_STATE NAME=PARK_STATE
	G90
	G1 Z{z_park} F1500
	G1 X{x_park} Y{y_park} F5000
	RESTORE_GCODE_STATE name=PARK_STATE

[gcode_macro START_DRYER]
description = Start the heated bed filament dryer.
gcode = 
	{% set ChamberTemperature = params.CHAMBER | default(65.0) | float %}
	{% set BedTemperature = params.TEMPERATURE | default(0.0) | float %}
	{% set DryTime = params.TIME | default(14400) | int %}
	M140 S{BedTemperature}
	M141 S{ChamberTemperature}
	SET_GCODE_VARIABLE MACRO=DRYER_STATUS VARIABLE=time_remaining VALUE={DryTime}
	SET_GCODE_VARIABLE MACRO=DRYER_STATUS VARIABLE=bed_temperature VALUE={BedTemperature}
	SET_GCODE_VARIABLE MACRO=DRYER_STATUS VARIABLE=chamber_temperature VALUE={ChamberTemperature}
	UPDATE_DELAYED_GCODE ID=DRYER_TIMER DURATION=1

[gcode_macro STOP_DRYER]
gcode = 
	M140 S0
	M141 S0
	SET_GCODE_VARIABLE MACRO=DRYER_STATUS VARIABLE=time_remaining VALUE=0
	UPDATE_DELAYED_GCODE ID=DRYER_TIMER DURATION=0
	M117 Drying Stopped

[gcode_macro DRYER_STATUS]
variable_time_remaining = 0
variable_bed_temperature = 0
variable_chamber_temperature = 0
gcode = 
	{% if time_remaining > 0 %}
	M140 S{bed_temperature}
	SET_GCODE_VARIABLE MACRO=DRYER_STATUS VARIABLE=time_remaining VALUE={time_remaining - 1}
	M117 Drying {time_remaining}
	{% else %}
	STOP_DRYER
	{% endif %}

[delayed_gcode DRYER_TIMER]
gcode = 
	UPDATE_DELAYED_GCODE ID=DRYER_TIMER DURATION=1
	DRYER_STATUS

[gcode_macro DRY_tpu]
gcode = 
	START_DRYER TEMPERATURE=0 CHAMBER=50 TIME=18000

[gcode_macro DRY_PETG]
gcode = 
	START_DRYER TEMPERATURE=0  CHAMBER=65 TIME=18000

[gcode_macro DRY_ABS]
gcode = 
	{% set S = params.S|default(0.0)|float %}
	SET_PIN PIN=Laser VALUE={S / 255.0}

[gcode_macro M4]
gcode = 
	{% set S = params.S|default(0.0)|float %}
	SET_PIN PIN=Laser VALUE={S / 255.0}

[gcode_macro M5]
gcode = 
	SET_PIN PIN=Laser VALUE=0

[menu __main __control __toolonoff]
type = input
enable = {'pwm_tool Laser' in printer}
name = Fan: {'ON ' if menu.input else 'OFF'}
input = {printer['pwm_tool Laser'].value}
input_min = 0
input_max = 1
input_step = 1
gcode = 
	M3 S{255 if menu.input else 0}

[menu __main __control __toolspeed]
type = input
enable = {'pwm_tool Laser' in printer}
name = Laser speed: {'%3d' % (menu.input*100)}%
input = {printer['pwm_tool Laser'].value}
input_min = 0
input_max = 1
input_step = 0.01
gcode = 
	M3 S{'%d' % (menu.input*255)}

[gcode_macro NOTE]
description = 
	"Plays a specified note for a specified duration
	@param {string} [N=C5] - Note to play
	@param {int} [D=500] - Duration of note. There are currently some Klipper limitations to how short a note can be.
	@param {int} [V=99] - Volume in percent
	@param {bool} [S=true] - Whether or not to stop the note after duration"
gcode = 
	{% set notes = {
	'C0': 16.35,   'CS0': 17.32,   'D0': 18.35,   'DS0': 19.45,   'E0': 20.60,   'F0': 21.83,   'FS0': 23.12,   'G0': 24.50,   'GS0': 25.96,   'A0': 27.50,   'AS0': 29.14,   'B0': 30.87,
	'C1': 32.70,   'CS1': 34.65,   'D1': 36.71,   'DS1': 38.89,   'E1': 41.20,   'F1': 43.65,   'FS1': 46.25,   'G1': 49.00,   'GS1': 51.91,   'A1': 55.00,   'AS1': 58.27,   'B1': 61.74,
	'C2': 65.41,   'CS2': 69.30,   'D2': 73.42,   'DS2': 77.78,   'E2': 82.41,   'F2': 87.31,   'FS2': 92.50,   'G2': 98.00,   'GS2': 103.83,  'A2': 110.00,  'AS2': 116.54,  'B2': 123.47,
	'C3': 130.81,  'CS3': 138.59,  'D3': 146.83,  'DS3': 155.56,  'E3': 164.81,  'F3': 174.61,  'FS3': 185.00,  'G3': 196.00,  'GS3': 207.65,  'A3': 220.00,  'AS3': 233.08,  'B3': 246.94,
	'C4': 261.63,  'CS4': 277.18,  'D4': 293.66,  'DS4': 311.13,  'E4': 329.63,  'F4': 349.23,  'FS4': 369.99,  'G4': 392.00,  'GS4': 415.30,  'A4': 440.00,  'AS4': 466.16,  'B4': 493.88,
	'C5': 523.25,  'CS5': 554.37,  'D5': 587.33,  'DS5': 622.25,  'E5': 659.26,  'F5': 698.46,  'FS5': 739.99,  'G5': 783.99,  'GS5': 830.61,  'A5': 880.00,  'AS5': 932.33,  'B5': 987.77,
	'C6': 1046.50, 'CS6': 1108.73, 'D6': 1174.66, 'DS6': 1244.51, 'E6': 1318.51, 'F6': 1396.91, 'FS6': 1479.98, 'G6': 1567.98, 'GS6': 1661.22, 'A6': 1760.00, 'AS6': 1864.66, 'B6': 1975.53,
	'C7': 2093.00, 'CS7': 2217.46, 'D7': 2349.32, 'DS7': 2489.02, 'E7': 2637.02, 'F7': 2793.83, 'FS7': 2959.96, 'G7': 3135.96, 'GS7': 3322.44, 'A7': 3520.00, 'AS7': 3729.31, 'B7': 3951.07,
	'C8': 4186.01, 'CS8': 4434.92, 'D8': 4698.64, 'DS8': 4978.03, 'E8': 5274.04, 'F8': 5587.65, 'FS8': 5919.91, 'G8': 6271.93, 'GS8': 6644.88, 'A8': 7040.00, 'AS8': 7458.62, 'B8': 7902.13,
	} %}
	
	{% set note = params.N|default('C5')|string %}
	
	{% set dur = params.D|default(500)|int %}
	
	
	{% set volume = params.V|default(99)|int %}
	
	{% set stop = params.S|default('true')|string %}
	
	{% set freq = notes[note] %}
	
	SET_PIN PIN=beeper VALUE={0.1 * (volume / 100) if volume > 0 else 1} CYCLE_TIME={ 1.0 / freq }
	G4 P{dur}
	{% if stop|lower == 'true' %}
	SET_PIN PIN=beeper VALUE=0 CYCLE_TIME={ 0.001 }
	{% endif %}

[gcode_macro TONE_GEN]
description = "Used for the tone generator menu"
variable_tone_freq = 0.001093
gcode = 
	M117 {printer["gcode_macro TONE_GEN"].tone_freq}nothz

[gcode_macro SONG_STAR_WARS_MAIN_THEME]
description = "Plays the Star Wars main theme"
gcode = 
	NOTE N=D4 D=133
	NOTE N=D4 D=133
	NOTE N=D4 D=133
	NOTE N=G4 D=1000
	NOTE N=D5 D=1000
	
	NOTE N=C5 D=133
	NOTE N=B4 D=133
	NOTE N=A4 D=133
	NOTE N=G5 D=1000
	NOTE N=D5 D=500
	
	NOTE N=C5 D=133
	NOTE N=B4 D=133
	NOTE N=A4 D=133
	NOTE N=G5 D=1000
	NOTE N=D5 D=500
	
	NOTE N=C5 D=133
	NOTE N=B4 D=133
	NOTE N=C5 D=133
	NOTE N=A4 D=1000

[gcode_macro SONG_CRAB_RAVE]
description = "Plays Crab Rave"
gcode = 
	NOTE N=D6 D=150 V=30 S=1
	NOTE N=AS6 D=150 V=30 S=1
	NOTE N=G6 D=150 V=30 S=1
	NOTE N=G6 D=150 V=30 S=0
	NOTE N=D6 D=150 V=30 S=1
	NOTE N=D6 D=150 V=30 S=0
	NOTE N=A6 D=150 V=30 S=1
	NOTE N=F6 D=150 V=30 S=1
	NOTE N=F6 D=150 V=30 S=0
	NOTE N=D6 D=150 V=30 S=1
	NOTE N=D6 D=150 V=30 S=0
	NOTE N=A6 D=150 V=30 S=1
	NOTE N=F6 D=150 V=30 S=1
	NOTE N=F6 D=150 V=30 S=0
	NOTE N=C6 D=150 V=30 S=1
	NOTE N=C6 D=150 V=30 S=1
	NOTE N=E6 D=150 V=30 S=1
	NOTE N=E6 D=150 V=30 S=0
	NOTE N=F6 D=150 V=30 S=1
	SET_PIN PIN=beeper VALUE=0

[gcode_macro one]
description = "one"
gcode = 
	NOTE N=C6 D=600 V=30 S=1
	NOTE N=D6 D=600 V=30 S=1
	NOTE N=G5 D=400 V=30 S=1
	NOTE N=D6 D=600 V=30 S=1
	NOTE N=E6 D=400 V=30 S=1
	G4 P150
	NOTE N=G6 D=180 V=30 S=0
	NOTE N=F6 D=180 V=30 S=0
	NOTE N=E6 D=180 V=30 S=0
	NOTE N=D6 D=180 V=30 S=1
	NOTE N=C6 D=600 V=30 S=1
	
	NOTE N=D6 D=600 V=30 S=1
	NOTE N=G5 D=400 V=30 S=1
	NOTE N=D6 D=600 V=30 S=1
	NOTE N=C6 D=600 V=30 S=1
	SET_PIN PIN=beeper VALUE=0

[gcode_macro SONG_BOOMER]
description = "BOOMER"
gcode = 
	M300 P207 S659
	M300 P207 S784
	M300 P207 S494
	M300 P207 S494
	M300 P207 S392
	M300 P207 S494
	M300 P207 S494
	M300 P207 S330
	M300 P207 S784
	M300 P207 S659
	M300 P207 S523
	M300 P207 S523
	M300 P207 S392
	M300 P207 S523
	M300 P207 S523
	M300 P207 S330
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S988
	M300 P207 S523
	M300 P207 S523
	M300 P207 S392
	M300 P207 S523
	M300 P207 S523
	M300 P207 S330
	M300 P207 S659
	M300 P207 S784
	M300 P207 S494
	M300 P207 S494
	M300 P207 S392
	M300 P207 S494
	M300 P207 S494
	M300 P207 S330
	M300 P207 S784
	M300 P207 S659
	M300 P207 S523
	M300 P207 S523
	M300 P207 S392
	M300 P207 S523
	M300 P207 S523
	M300 P207 S330
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S988
	M300 P207 S523
	M300 P207 S523
	M300 P207 S392
	M300 P207 S523
	M300 P207 S523
	M300 P207 S330
	M300 P207 S659
	M300 P207 S784
	M300 P207 S494
	M300 P207 S494
	M300 P207 S392
	M300 P207 S494
	M300 P207 S494
	M300 P207 S330
	M300 P207 S784
	M300 P207 S659
	M300 P207 S523
	M300 P207 S523
	M300 P207 S392
	M300 P207 S523
	M300 P207 S523
	M300 P207 S330
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S784
	M300 P207 S880
	M300 P207 S988
	M300 P207 S523
	M300 P207 S523
	M300 P207 S392
	M300 P207 S523
	M300 P207 S523
	M300 P207 S330

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if not tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom','x_only','y_only'] %}
	{% set dic = {'center'      : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left'  : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right' : {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'   : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right'  : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'      : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz},
	'x_only'      : {'x': tl.park.custom.x, 'y': 'none'          , 'dz': tl.park.custom.dz},
	'y_only'      : {'x': 'none'          , 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': 'X' + park.coord.x|string if park.pos != 'y_only' else '',
	'y': 'Y' + park.coord.y|string if park.pos != 'x_only' else '',
	'z': 'Z'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}
	SET_GCODE_OFFSET X=0 Y=0
	G90
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing}
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[exclude_object]

[gcode_shell_command update_git_script]
command = bash -c "bash $HOME/klipper-backup/script.sh"
timeout = 90.0
verbose = True

[gcode_shell_command update_git_script_message]
command = bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout = 90.0
verbose = True

[mcu]
serial = /dev/ttyS3
restart_method = command

[output_pin Power]
pin = PC12
value = 1
shutdown_value = 1

[temperature_sensor orange_pi]
sensor_type = temperature_host
min_temp = 0
max_temp = 100

[heater_generic chamber_heater]
heater_pin = !PA7
sensor_type = ATC Semitec 104GT-2
sensor_pin = PA5
control = watermark
max_power = 1
min_temp = 15
max_temp = 85

[verify_heater chamber_heater]
max_error = 9999
check_gain_time = 9999
hysteresis = 5
heating_gain = 2

[filament_motion_sensor motion_sensor]
detection_length = 50
extruder = extruder
switch_pin = !PC15
pause_on_runout = True
runout_gcode = 
	SONG_CRAB_RAVE

[bltouch]
sensor_pin = ^PC14
control_pin = PA1
x_offset = -40
y_offset = 0.000
z_offset = 1.70
pin_up_reports_not_triggered = False
probe_with_touch_mode = True

[heater_bed]
heater_pin = PC9
sensor_type = ATC Semitec 104GT-2
sensor_pin = PC3
control = pid
pid_kp = 72.553
pid_ki = 1.154
pid_kd = 1139.994
min_temp = 5
max_temp = 125

[heater_fan radiator]
pin = PC7
max_power = 1.0
kick_start_time = 0.600
heater = extruder
heater_temp = 50.0
shutdown_speed = 1

[fan]
pin = PC6

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 43.0
shaper_type_y = mzv
shaper_freq_y = 32.6

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 1900
max_z_velocity = 30
max_z_accel = 100
square_corner_velocity = 4

[bed_mesh]
speed = 150
horizontal_move_z = 9
mesh_min = 10, 20
mesh_max = 195, 210
probe_count = 5
mesh_pps = 2, 3
algorithm = bicubic
bicubic_tension = 0.2
move_check_distance = 9
split_delta_z = .025
fade_start = 1
fade_end = 10
fade_target = 0

[screws_tilt_adjust]
screw1 = 79, 27
screw1_name = Peredniy Leviy
screw2 = 235, 27
screw2_name = Peredniy Praviy
screw3 = 235,197
screw3_name = Zadniy Praviy
screw4 = 79,197
screw4_name = Zadniy Leviy
speed = 120
horizontal_move_z = 9

[safe_z_home]
home_xy_position = 157,115
speed = 50
z_hop = 9.0
z_hop_speed = 20.0

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC0
position_endstop = 0
position_max = 240
position_min = -2
homing_retract_dist = 5
homing_speed = 50
second_homing_speed = 10

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
uart_address = 0
run_current = 0.580
stealthchop_threshold = 999999

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_endstop = 0
homing_retract_dist = 5
homing_speed = 50
second_homing_speed = 10
position_max = 231
position_min = 0

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
uart_address = 2
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
microsteps = 16
rotation_distance = 40
gear_ratio = 80:16
full_steps_per_rotation = 200
endstop_pin = probe:z_virtual_endstop
homing_retract_dist = 9
second_homing_speed = 10
position_min = -5
position_max = 245
homing_speed = 50

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
run_current = 0.580
stealthchop_threshold = 999999
interpolate = false

[extruder]
step_pin = PB3
dir_pin = PB4
enable_pin = !PD2
microsteps = 16
rotation_distance = 4.637
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PC8
sensor_type = ATC Semitec 104GT-2
sensor_pin = PA0
min_temp = 5
max_temp = 270
max_extrude_only_velocity = 120
max_extrude_only_accel = 3000
pressure_advance = 0.031
full_steps_per_rotation = 200
control = pid
pid_kp = 29.662
pid_ki = 2.382
pid_kd = 92.322

[tmc2209 extruder]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
run_current = 0.7
stealthchop_threshold = 999999

[static_digital_output usb_pullup_enable]
pins = !PA14

[board_pins]
aliases = 
	
	EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8,  EXP1_9=<GND>,
	EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PB15, EXP1_10=<5V>

[display]
lcd_type = st7920
cs_pin = EXP1_7
sclk_pin = EXP1_6
sid_pin = EXP1_8
encoder_pins = ^EXP1_5, ^EXP1_3
click_pin = ^!EXP1_2

[pwm_cycle_time beeper]
pin = EXP1_1
shutdown_value = 0
cycle_time = 0.001

[firmware_retraction]
retract_length = 1.0
retract_speed = 80
unretract_extra_length = 0
unretract_speed = 80

[pwm_tool Laser]
pin = PA6
cycle_time = 0.0001
shutdown_value = 0
maximum_mcu_duration = 5

[bed_mesh 70]
version = 1
points = 
	-0.045000, 0.027500, 0.015000
	-0.055000, -0.005000, -0.035000
	-0.007500, 0.040000, -0.002500
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 3
algo = bicubic
tension = 0.2
min_x = 10.0
max_x = 195.0
min_y = 20.0
max_y = 210.0

[bed_mesh default]
version = 1
points = 
	0.020000, 0.025000, 0.030000, -0.007500, -0.052500
	0.015000, 0.017500, 0.022500, -0.007500, -0.057500
	0.030000, 0.030000, 0.037500, 0.002500, -0.035000
	0.012500, 0.030000, 0.050000, 0.035000, -0.010000
	0.080000, 0.087500, 0.115000, 0.097500, 0.067500
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 3
algo = bicubic
tension = 0.2
min_x = 10.0
max_x = 195.0
min_y = 20.0
max_y = 210.0
=======================
Loaded MCU 'mcu' 118 commands (v0.12.0-404-g80d185c94 / gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.40-2+18+b1) 2.40)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 INITIAL_PINS=!PA14 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA3,PA2 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'mcu' (1024 moves)
Args: ['/home/klipper/klipper/klippy/klippy.py', '/home/klipper/printer_data/config/printer.cfg', '-I', '/home/klipper/printer_data/comms/klippy.serial', '-l', '/home/klipper/printer_data/logs/klippy.log', '-a', '/home/klipper/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-404-g80d185c94-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.10.12 (main, Nov  6 2024, 20:22:13) [GCC 11.4.0]'
webhooks client 281473002207312: {'program': 'Moonraker', 'version': 'v0.9.3-4-ga4604e3'}
=============== Log rollover at Thu Dec 26 00:00:00 2024 ===============
remote: warning: See https://gh.io/lfs for more information.        
remote: warning: File printer_data/gcodes/Куб_0.2mm_PETG_Generic Klipper Printer_116d18h27m.gcode is 50.23 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB        
remote: warning: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.        

remote: error: GH013: Repository rule violations found for refs/heads/main.        
remote: 
remote: - GITHUB PUSH PROTECTION        
remote:   —————————————————————————————————————————        
remote:     Resolve the following violations before pushing again        
remote: 
remote:     - Push cannot contain secrets        
remote: 
remote:             
remote:      (?) Learn how to resolve a blocked push        
remote:      https://docs.github.com/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line#resolving-a-blocked-push        
remote:             
remote:      (?) This repository does not have Secret Scanning enabled, but is eligible. Enable Secret Scanning to view and manage detected secrets.        
remote:      Visit the repository settings page, https://github.com/Ferz82/github-klipper-backup/settings/security_analysis        
remote:             
remote:             
remote:       —— GitHub Personal Access Token ——————————————————————        
remote:        locations:        
remote:          - commit: 605cb1c9e91b4c3761aa36dde34e9accec0d11ec        
remote:            path: printer_data/logs/klippy.log:24134        
remote:          - commit: bdfbceb184d762843c2dba72d162a6f93cfb2800        
remote:            path: printer_data/logs/klippy.log:24134        
remote:             
remote:        (?) To push, remove secret from commit(s) or follow this URL to allow the secret.        
remote:        https://github.com/Ferz82/github-klipper-backup/security/secret-scanning/unblock-secret/2qiugHefVopTvqZl9aHe8ohwyta        
remote:             
remote: 
remote: 

To https://github.com/Ferz82/github-klipper-backup.git
 ! [remote rejected] main -> main (push declined due to repository rule violations)

error: failed to push some refs to 'https://github.com/Ferz82/github-klipper-backup.git'

Command {update_git_script} finished

Running Command {update_git_script}...:
[1;93m●[0m Checking for installed dependencies /[K[1;92m●[0m Checking for installed dependencies [1;92mDone![0m


Klipper-Backup is up to date


From https://github.com/Ferz82/github-klipper-backup
 * branch            main       -> FETCH_HEAD

Already up to date.

Skipping symbolic link: printer_data/config/mainsail.cfg

On branch main
Your branch is ahead of 'origin/main' by 3 commits.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

remote: warning: See https://gh.io/lfs for more information.        
remote: warning: File printer_data/gcodes/Куб_0.2mm_PETG_Generic Klipper Printer_116d18h27m.gcode is 50.23 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB        
remote: warning: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.        

To https://github.com/Ferz82/github-klipper-backup.git
   6fd1282..ca05304  main -> main

Branch 'main' set up to track remote branch 'main' from 'origin'.

Command {update_git_script} finished

Running Command {update_git_script}...:
[1;93m●[0m Checking for installed dependencies /[K[1;92m●[0m Checking for installed dependencies [1;92mDone![0m


Klipper-Backup is up to date


From https://github.com/Ferz82/github-klipper-backup
 * branch            main       -> FETCH_HEAD

Already up to date.

skipping non-regular file "printer_data/comms/klippy.serial"
skipping non-regular file "printer_data/comms/klippy.sock"
skipping non-regular file "printer_data/comms/moonraker.sock"

skipping non-regular file "printer_data/config/mainsail.cfg"

Write g-code response
Traceback (most recent call last):
  File "/home/klipper/klipper/klippy/gcode.py", line 459, in _respond_raw
    os.write(self.fd, (msg+"\n").encode())
BlockingIOError: [Errno 11] Resource temporarily unavailable
